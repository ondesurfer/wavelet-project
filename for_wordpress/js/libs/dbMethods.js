/**
 *  This file contains functions to handle the database object generated by sql.js
 *
 *	Dependencies: sql.js
 *
 *	(last modification: 3.5.17 Simon)
 */


/**
 *  Checks if the database already is loaded. If necessary the database is loaded.'./wavelet-systems.sqlite' (without updating list-elements)
 *  Then we invoke the callback2-function with the given parameters 'params'.
 *  (last modification: 3.5.2017 Simon)
 */
function checkDB(path,callback2,params) {
	if ( typeof (db) != 'undefined') {
		console.log("existing database is used");
		callback2(params);
	} else {
		console.log("load database");
		//builds an HttpRequest on 'theUrl' and runs the 'callback' function with the content of the HttpRequest response
		function httpGetAsync(theUrl, callback) {
			var xmlHttp = new XMLHttpRequest();
			xmlHttp.responseType = 'arraybuffer';

			xmlHttp.onreadystatechange = function() {
				//if the XMLHttpRequest was successful run the callback function with the response
				if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
					callback(xmlHttp.response);
				}
			};
			xmlHttp.open("GET", theUrl, true);
			// true bedeutet, dass onreadystate in neuem thread aufgerufen wird
			xmlHttp.send(null);
		}

		//constructs the callback function and runs the HttpRequest
		function start() {
			var callback = function(str) {
				var uInt8Array = new Uint8Array(str);
				// do not use a 'var' here! So the database is saved as an global document. attribute
				db = new SQL.Database(uInt8Array);
				console.log("database-loading finished");
				callback2(params);
			};
			httpGetAsync(path, callback);
			
		}

		start();
	}
}
